import logging
from aiogram import Router, F, Bot
from aiogram.filters import Command, CommandStart, StateFilter
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import default_state

from filters.filters import *
from fsm.fsm import *
from db.requests import *
from lexicon.ru import LEXICON_RU
from keyboards.keys import *
from utils.utils import *

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä
router = Router()

# –õ–æ–≥–≥–µ—Ä
logger = logging.getLogger(__name__)

# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
@router.message(CommandStart())
async def process_start_command(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.
    """
    await message.answer(text=LEXICON_RU['start_mes'], reply_markup=start_key())


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É /help
@router.message(Command(commands="help"))
async def process_help_command(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ç–µ–∫—Å—Ç –ø–æ–º–æ—â–∏.
    """
    await message.answer(text=LEXICON_RU['help'])

# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É /paysupport
@router.message(Command(commands="paysupport"))
async def process_paysupport_command(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /paysupport.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ç–µ–∫—Å—Ç –ø–æ–º–æ—â–∏.
    """
    await message.answer(text=LEXICON_RU['support'])

# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É /post
@router.message(Command(commands="post"), IsUser(), IsSub())
async def process_post_command(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /post.
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –º–æ–∂–µ—Ç –ª–∏ –æ–Ω —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –ø–æ—Å—Ç.
    """
    if await search_user_post(message.from_user.id):
        await message.answer(
            LEXICON_RU['true_post'], 
            reply_markup=vip_key()
        )
    else:
        await message.answer(
            text=LEXICON_RU['post'],
            reply_markup=post_key()
        )

# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É /post
@router.message(Command(commands="post"))
async def process_post_command(message: Message):
    await message.answer(text=LEXICON_RU['post_f'])

# –≠—Ç–æ—Ç —Ö–µ–Ω–¥–ª–µ—Ä —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è"
@router.callback_query(F.data == 'check_button')
async def process_check_press(callback: CallbackQuery, bot: Bot):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏'.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–∞–Ω–∞–ª—ã.
    """
    try:
        for channel in LEXICON_RU['list']:
            label = channel['lable']
            url = channel['url']
            telegram_id = callback.from_user.id
            check = await is_user_subscribed(bot, url, telegram_id)
            if not check:
                await callback.message.answer(
                    f"{LEXICON_RU['no_sub']}{label}",
                    reply_markup=start_key()
                )
                return False

        sec = security_key()
        await callback.message.answer(
            text=f"{LEXICON_RU['bot_mes']}\n{sec[1]}",
            reply_markup=sec[0]
        )
    except Exception as e:
        logger.exception(f"Error in process_check_press: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏
@router.callback_query(F.data.startswith("math_answer"), StateFilter(default_state))
async def process_math_answer(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.
    """
    try:
        res = callback.data.split(":")
        await state.clear()
        if int(res[1]) == int(res[2]):

            await add_user(callback.from_user.id, callback.from_user.username)
            is_vip = await search_user_post(callback.from_user.id)
            if is_vip:
                await callback.message.edit_text(
                    LEXICON_RU['true_post'], 
                    reply_markup=vip_key()
                )
            else:
                await callback.message.edit_text(
                    text=LEXICON_RU['security_true'],
                    reply_markup=post_key()
                )
        else:
            await callback.message.edit_text(LEXICON_RU['security_false'])
    except Exception as e:
        logger.exception(f"Error in process_math_answer: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–Ω–∞–ª–∞
@router.callback_query(F.data.startswith("channal"), StateFilter(FSMpost.fill_channal))
async def channal_input(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞.
    """
    try:
        res = callback.data.split(":")
        await state.update_data(channal=res[1])
        await state.set_state(FSMpost.fill_name)
        await callback.message.answer(text=LEXICON_RU['q_s'], reply_markup=anon_key())
    except Exception as e:
        logger.exception(f"Error in channal_input: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–¥–æ –∏–º—è –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –∏–ª–∏ –Ω–µ—Ç
@router.callback_query(F.data.startswith("name"), StateFilter(FSMpost.fill_name))
async def name_input(callback: CallbackQuery, state: FSMContext):
    res = callback.data.split("_")
    await state.update_data(anon=res[1])
    await state.set_state(FSMpost.fill_message)
    await callback.message.answer(text=LEXICON_RU['message_mes'])

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å—Ç–∞

@router.message(StateFilter(FSMpost.fill_message))
async def message_input(message: Message, state: FSMContext, BOT_TOKEN):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.
    """
    await message.answer(text=LEXICON_RU['vop_true'])
    if IsCorrectPost():
        try:
            res = await state.get_data()

            if res['status'] == 'vip':
                channel = res['channal']
                mes = create_vip(message.text, channel, res['anon'])   
                await message.answer(send_post_via_url(channel, BOT_TOKEN, mes)[1])
                await state.clear()
                

            elif res['status'] == 'unvip':
                channel = res['channal']
                mes = message.text

                if res['anon'] == 'yes':
                    add = await add_post(
                        user_id=message.from_user.id,
                        username=message.from_user.username,
                        message=mes,
                        chat_id=message.chat.id,
                        channel=channel
                    )
                else:
                    add = await add_post(
                        user_id=message.from_user.id,
                        username='@–ê–Ω–æ–Ω–∏–ºüò∂‚Äçüå´Ô∏è',
                        message=mes,
                        chat_id=message.chat.id,
                        channel=channel
                    )
                if add:
                    await message.answer(
                        text=LEXICON_RU['use_vip'],
                    )
                    await state.clear()
                else:
                    await message.answer(text='–û—à–∏–±–∫–∞')
                    await state.clear()

        except Exception as e:
            logger.exception(f"Error in message_input: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    else:
        await message.answer(text=LEXICON_RU['false_mes'])
'''# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å—Ç–∞
@router.message(StateFilter(FSMpost.fill_message))
async def message_input(message: Message):
    await message.answer(text=LEXICON_RU['false_mes'])'''

# –ë–µ—Å–ø–ª–∞—Ç–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ
@router.callback_query(F.data == 'free_button')
async def free_post_input(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ.
    """
    try:
        if await search_user_post(callback.from_user.id):
            await callback.message.answer(
                text=LEXICON_RU['true_post'],
                reply_markup=vip_key()
            )
            return
        await state.clear()
        await state.update_data(status='unvip')
        await state.set_state(FSMpost.fill_channal)
        await callback.message.answer(
            text=LEXICON_RU['get_channal'],
            reply_markup=channal_key()
        )
    except Exception as e:
        logger.exception(f"Error in free_post_input: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

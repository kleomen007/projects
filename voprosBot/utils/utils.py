from aiogram.enums import ChatMemberStatus
from lexicon.ru import LEXICON_RU
from aiogram import Bot
import random, logging, requests

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(filename)s:%(lineno)d #%(levelname)-8s [%(asctime)s] - %(name)s - %(message)s',
)

#–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª
async def is_user_subscribed(bot: Bot, channel_url: str, telegram_id: int) -> bool:
    try:
        # –ü–æ–ª—É—á–∞–µ–º username –∫–∞–Ω–∞–ª–∞ –∏–∑ URL
        channel_username = channel_url.split('/')[-1]
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –∫–∞–Ω–∞–ª–µ
        member = await bot.get_chat_member(chat_id=f"@{channel_username}", user_id=telegram_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if member.status in [ChatMemberStatus.MEMBER, ChatMemberStatus.CREATOR, ChatMemberStatus.ADMINISTRATOR]:
            return True
        else:
            return False
    except Exception as e:
        # –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –±–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É)
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Å—Ç–æ–≥–æ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞
def generate_math_example():
    num1 = random.randint(1, 10)
    num2 = random.randint(1, 10)
    correct_answer = num1 + num2
    answers = []
    answers.append(correct_answer)
    l = [-2, -1, 1, 2]
    for i in range(4):
        answers.append(correct_answer + l[i])

    random.shuffle(answers)
    return f"{num1} + {num2} = ?", correct_answer, answers

def get_url_by_en(en_value):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è URL –∫–∞–Ω–∞–ª–∞ –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é en.
    
    :param en_value: –°—Ç—Ä–æ–∫–∞, –∫–ª—é—á en –¥–ª—è –ø–æ–∏—Å–∫–∞.
    :param channels: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–∞–Ω–∞–ª–æ–≤.
    :return: URL –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ URL –Ω–µ –Ω–∞–π–¥–µ–Ω.
    """
    for channel in LEXICON_RU['close_list']:
        if channel['en'] == en_value:
            return channel['url']
    return f"URL –¥–ª—è en='{en_value}' –Ω–µ –Ω–∞–π–¥–µ–Ω."

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ URL
def send_post_via_url(en: str, token: str, message: str):
    channal = f'@{get_url_by_en(en).split("/")[-1]}'
    # URL –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ Telegram API
    BASE_URL = f"https://api.telegram.org/bot{token}/sendMessage"

    payload = {
        "chat_id": channal,
        "text": message,
        "parse_mode": "HTML",  # –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTML –∏–ª–∏ Markdown –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    }
    try:
        response = requests.post(BASE_URL, json=payload)
        if response.status_code == 200:
            logging.info(f"–í–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: \n–ö–∞–Ω–∞–ª {channal}")
            return True, f"–í–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: \n–ö–∞–Ω–∞–ª {channal}"
        else:
            logging.error(f"–û—à–∏–±–∫–∞: {response.status_code} - {response.text}")
            return False, f"–û—à–∏–±–∫–∞: {response.status_code} - {response.text}"
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return False, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}"

# –®–∞–±–ª–æ–Ω –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞ –≤ Telegram
def create_post_message(question: str, channel_name: str, username: str) -> str:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å—Ç–∞ –≤ Telegram –∫–∞–Ω–∞–ª–µ.
    –ü—É–±–ª–∏–∫—É–µ—Ç—Å—è –≤–æ–ø—Ä–æ—Å —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.

    Args:
        question (str): –í–æ–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å.
        channel_name (str): –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞, –≤ –∫–æ—Ç–æ—Ä—ã–π –ø—É–±–ª–∏–∫—É–µ—Ç—Å—è –ø–æ—Å—Ç.
        username (str): –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–æ–ø—Ä–æ—Å.

    Returns:
        str: –û—Ñ–æ—Ä–º–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.
    """
    post_message = f"""
üìù **–í–æ–ø—Ä–æ—Å –Ω–∞ –∫–∞–Ω–∞–ª–µ**: {channel_name}

üë§ **–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**: @{username}

üí¨ **–í–æ–ø—Ä–æ—Å**:
{question}

-------------------------------------
‚ú® –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –ø—É–±–ª–∏–∫—É–π—Ç–µ –∏—Ö —á–µ—Ä–µ–∑ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞: [@VoprosNaDivanbot](https://t.me/VoprosNaDivanbot)
"""

    return post_message

# –®–∞–±–ª–æ–Ω –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞ –≤ Telegram
def create_vip(question: str, channel_name: str, username: str) -> str:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å—Ç–∞ –≤ Telegram –∫–∞–Ω–∞–ª–µ.
    –ü—É–±–ª–∏–∫—É–µ—Ç—Å—è –≤–æ–ø—Ä–æ—Å —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.

    Args:
        question (str): –í–æ–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å.
        channel_name (str): –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞, –≤ –∫–æ—Ç–æ—Ä—ã–π –ø—É–±–ª–∏–∫—É–µ—Ç—Å—è –ø–æ—Å—Ç.
        username (str): –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–æ–ø—Ä–æ—Å.

    Returns:
        str: –û—Ñ–æ—Ä–º–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.
    """
    print(username)
    if username == 'no':
        username = '–ê–Ω–æ–Ω–∏–ºüò∂‚Äçüå´Ô∏è'
    post_message = f"""
     **üíéVIP –í–æ–ø—Ä–æ—Å –Ω–∞ –∫–∞–Ω–∞–ª–µüíé**: {channel_name}

üë§ **–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**: @{username}

üí¨ **–í–æ–ø—Ä–æ—Å**:
{question}

-------------------------------------
‚ú® –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –ø—É–±–ª–∏–∫—É–π—Ç–µ –∏—Ö —á–µ—Ä–µ–∑ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞: [@VoprosNaDivanbot](https://t.me/VoprosNaDivanbot)
"""

    return post_message

def mes_user(channel: str):
    mes = f'''–í–∞—à –≤–æ–ø—Ä–æ—Å –±—ã–ª –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –Ω–∞ –∫–∞–Ω–ª–µ \n  {channel}'''
    return mes